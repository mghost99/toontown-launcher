UP = b'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'
DOWN = b'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'
HOVER = DOWN

from tkinter import *
from PIL import ImageTk
from base64 import b64decode as b

class ManageAccountLink(Canvas):
    def __init__(self, *args, **kwargs):
        Canvas.__init__(self, *args, **kwargs)
        self.place(x=402, y=220, height=13, width=104)

        self.config(highlightthickness=0, bd=0, relief='flat', bg="darkgray")
        self.image = ImageTk.PhotoImage(data=b(UP))
        self.btn = self.create_image(0, 0, image=self.image, anchor=NW)
        self.bind('<Leave>', self.on_leave)
        self.bind('<Enter>', self.on_enter)
        self.bind('<ButtonRelease-1>', self.on_release)
        self.bind('<ButtonPress-1>', self.on_click)
    
    def update_image(self, image):
        self.image = ImageTk.PhotoImage(data=b(image))
        self.itemconfig(self.btn, image=self.image)

    def on_enter(self, e):
        self.update_image(HOVER)

    def on_leave(self, e):
        self.update_image(UP)
    
    def on_click(self, e):
        self.update_image(DOWN)
        print("clicked")
    
    def on_release(self, e):
        self.update_image(UP)